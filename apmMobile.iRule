#### iRule: apmMobile ################################
## version 1
## subver .0
## author: ryan.johnson@f5.com
## date revised: 9/21/2015
## name: pkiMobileApm
##
## last modified by: ryan.johnson@f5.com
## For the iRule to work, these two datagroups: 
## iosudid_datagroup, droidmac_datagroup must be created as type string, even 
## if they are not used.
##
## Purpose: Extract otherwise inaccessible attributes from X509 certificate data
##		(ex. 
##			Subject Alternative Name - User Principal Name (UPN)
##			Federal Agency Smartcard Credential Number (FASC-N) 
##			Subject Directory Attributes - Country of Citizenship (2.5.29.9)
##		)
##
## Tools used to develop solution:
##		linux-based OID converter (http://www.rtner.de/software/oid.html)
##		ASN.1 Editor (www.lipingshare.com/Asn1Editor)
##		Multi-function ascii/binary/decimal/hexidecimal translator (http://home2.paulschou.net/tools/xlate/)
##
## Credit for original implementation of the FASCN extraction to Kevin Stewart and Lucas Thompson
##
###########################################################

when RULE_INIT {

	  #Modifiable variables
	  #Toggle debugging, one can debug on a per event basis
	  #Apple no longer provides access to the MAC address in IOS
	  #UDID is the preferred unique identifier
	  set static::IOSUDIDCHECKDEBUG 1
	  set static::DROIDSNCHECKDEBUG 1
	  set static::DROIDMACCHCKDEBUG 1
	  set static::FASCNDEBUG 1
	  set static::EDIPIDEBUG 1
	  set static::UPNDEBUG 1
	  set static::USERCNDEBUG 1
	  #Or debug everything
	  set static::DEBUG 1

	  set static::IOSUDIDCHECKUSER 0
	  set static::DROIDSNCHECKUSER 0
	  set static::DROIDMACCHECKUSER 0
	  set static::IOSUDIDDATAGROUP iosudid_datagroup
	  set static::DROIDMACDATAGROUP droidmac_datagroup
	  set static::DROIDSNDATAGROUP droidsn_datagroup

	  #FASCN is 40 minus the LRC char
	  set static::fascnStandardLength 39

      #UPN/EDIPI strip out chars from the UPN/EDIPI (EDIPI is everything before the @ in upn) variables
      set static::upnStripChars { < "" > "" }

      #Should not be modified
	  array set static::hexToBinary {
       
	 			0 0000
        		1 0001
        		2 0010
        		3 0011
        		4 0100
        		5 0101
        		6 0110
        		7 0111
        		8 1000
        		9 1001
        		A 1010
        		B 1011
        		C 1100
        		D 1101
        		E 1110
        		F 1111
        		
	}

	array set static::binarytoBCDFourBitOddParity {
       
			00001 0
       		10000 1
       		01000 2
       		11001 3
       		00100 4
       		10101 5
       		01101 6
       		11100 7
       		00010 8
       		10011 9
       		11010 [
       		10110 -
       		11111 ]

	}


}

when ACCESS_POLICY_AGENT_EVENT {

          set bcdFourBitOddParityRepresentation ""

           switch [ACCESS::policy agent_id] {

  		"GETFASCN" {

			if { $static::DEBUG || $static::FASCNDEBUG } {log local0. "In GETFASCN"}

   			set strippedcert [findstr [ACCESS::session data get session.ssl.cert.whole ] "-----BEGIN CERTIFICATE-----" 27 "-----END CERTIFICATE-----"]

   			if { [catch { b64decode $strippedcert } str_b64dec] == 0 and $str_b64dec ne "" } { 
      		
				###### UPN ######################################
      				if { [catch {
            
					## UPN OID=1.3.6.1.4.1.311.20.2.3 - HEX=\x06\x0A\x2B\x06\x01\x04\x01\x82\x37\x14\x02\x03 - LENGTH=15 (add 3 to hex count)
            				set offset [string first \x06\x0A\x2B\x06\x01\x04\x01\x82\x37\x14\x02\x03 $str_b64dec]
            				set newoffset [expr {$offset + 15}]
            				## last value in decoded string (up to new offset and converted to integer) indicates length of the UPN value
            				binary scan [string index $str_b64dec $newoffset] c upnlengthinteger
            				set upn [string range $str_b64dec [expr {$newoffset + 1}] [expr {$upnlengthinteger + $newoffset}]]
         			
				} error] 
      			} {
        
			 	set upn "NO UPN"
      			}

      			###### FASC #####################################
      			if { [catch {

					if { $static::DEBUG || $static::FASCNDEBUG } {log local0. "In catch GETFASCN Event "}

					## FASCN OID=2.16.840.1.101.3.6.6 - HEX=\x06\x08\x60\x86\x48\x01\x65\x03\x06\x06 - LENGTH=13 (+3 to hex count)
            		set offset [string first \x06\x08\x60\x86\x48\x01\x65\x03\x06\x06 $str_b64dec]
            		set newoffset [expr {$offset + 13}]
            		## last value in decoded string (up to new offset and converted to integer) indicates length of the FASC-N value
            		binary scan [string index $str_b64dec $newoffset] c fasclengthinteger

            		## At this point we have the FASC-N value, which could be in either UTF8String or OCTET STRING format.
            		## To get format, look at second to last value in decoded string (up to new offset and converted to integer)
            		## A value of 12 = UTF8String, and 4 = OCTET STRING (http://en.wikipedia.org/wiki/Basic_Encoding_Rules)	
            		binary scan [string index $str_b64dec [expr {$newoffset -1}]] c fasctypeint

            		if { $fasctypeint == 12 } {
               
						## simple UTF8String format
						set fasc [string range $str_b64dec [expr {$newoffset + 1}] [expr {$fasclengthinteger + $newoffset}]]
						if { $static::DEBUG || $static::FASCNDEBUG } {log local0. "In catch GETFASCN Event fasc format is UTF8String"}

					} elseif { $fasctypeint == 4 } {
               
						## OCTET STRING format
               			set fasc [binary scan [string range $str_b64dec [expr {$newoffset + 1}] [expr {$fasclengthinteger + $newoffset}]] H* test]
						if { $static::DEBUG || $static::FASCNDEBUG } {log local0. "In catch GETFASCN Event fasc format is OctetString"}

               			## Convert hex data to binary
               			set t [list 0 0000 1 0001 2 0010 3 0011 4 0100 5 0101 6 0110 7 0111 8 1000 9 1001 a 1010 b 1011 c 1100 d 1101 e 1110 f 1111 A 1010 B 1011 C 1100 D 1101 E 1110 F 1111]
               			regsub {^0[xX]} $test {} hex
						set hexLength [string length $hex]
						if { $static::DEBUG || $static::FASCNDEBUG } {log local0. "In catch GETFASCN Event fasc hex Length: $hexLength hex: $hex"}
               			set binaryRepresentation [string map -nocase $t $hex]
					
						set binaryRepresentationLength [string length $binaryRepresentation]

						if { $static::DEBUG || $static::FASCNDEBUG } {log local0. "In catch GETFASCN Event fasc binary Length: $binaryRepresentationLength binary: $binaryRepresentation"}

						for {set y 0; set z 4} { $z < $binaryRepresentationLength } { incr y 5; incr z 5} {

     						set bcdFourBitOddParityRepresentation "$bcdFourBitOddParityRepresentation$static::binarytoBCDFourBitOddParity([string range $binaryRepresentation $y $z])"

						}
            
				} else {
               
							## error
               				ACCESS::session data set session.custom.FASCNSC "FASC ERROR"
               				ACCESS::session data set session.custom.FASCNSCStatus "failed"
               				if { $static::DEBUG || $static::FASCNDEBUG } {log local0. "FASCN error [ACCESS::session data get session.custom.FASCNSCStatus]"}

		    	}
         		
			} error] 
      	
			} {
         
				ACCESS::session data set session.custom.FASCNSC "NO FASC-N"
				ACCESS::session data set session.custom.FASCNSCStatus "failed"
      			if { $static::DEBUG || $static::FASCNDEBUG } {log local0. "FASCN [ACCESS::session data get session.custom.FASCNSCStatus]"}
	
			}

      		###### Citizenship ###############################
      
		if { [catch {
           
			 ## CITIZENSHIP OID=1.3.6.1.5.5.7.9.4 - HEX=\x06\x08\x2B\x06\x01\x05\x05\x07\x09\x04 - LENGTH=13 (+3 to hex count)
            		set offset [string first \x06\x08\x2B\x06\x01\x05\x05\x07\x09\x04 $str_b64dec]
            		set newoffset [expr {$offset + 13}]
            		## last value in decoded string (up to new offset and converted to integer) indicates length of CITIZENSHIP value
            		binary scan [string index $str_b64dec $newoffset] c citlengthinteger
            		set citizenship [string range $str_b64dec [expr {$newoffset + 1}] [expr {$citlengthinteger + $newoffset}]]
         
		} error] 
      	
		} {
         
			set citizenship "NO CITIZENSHIP"
      		
      	}


		#Parse out FASCN codes
		#http://www.christhilges.com/fasc-n/
		#See http://www.christhilges.com/fasc-n/fasc-n_figure6.jpg for more detail

		set bcdRepresentationLength [string length $bcdFourBitOddParityRepresentation]
		if { $static::DEBUG || $static::DEBUGFASCN } {log local0. "In catch GETFASCN Event fascn: $bcdFourBitOddParityRepresentation end"}

		if { $static::DEBUG || $static::DEBUGFASCN } {log local0. "$bcdRepresentationLength == $static::fascnStandardLength"}
		#First we strip off the Start Sentinel [ Field Separator - and End Sentinel ]

		set stripChars [list "\[" "" "\]" "" "\-" ""]
		set bcdFourBitOddParityRepresentationNumbers [string map $stripChars $bcdFourBitOddParityRepresentation]
		ACCESS::session data set session.custom.FASCN $bcdFourBitOddParityRepresentationNumbers
		ACCESS::session data set session.custom.FASCNSCStatus "succeeded"
		if { $static::DEBUG || $static::FASCNDEBUG } {log local0. "FASCN [ACCESS::session data get session.custom.FASCNSCStatus] : $bcdFourBitOddParityRepresentationNumbers"}

		#Bits 0 through 3 designate the organizational entity
		#When the Organizational Category is 1, then the Organizational 
		#Identifier identifies the Government entity that issued the FASC-N. 
		#The complete list is specified in the National Institute of Standards and Technology 
		#(NIST) Special Publication 800-87 (current revision is 1). Some values are listed below: 
		#1200 AGRICULTURE, Department of 
		#1300 COMMERCE, Department of 
		#9700 DEFENSE, Department of (except military departments) 
		#5700 AIR FORCE, Department of the (Headquarters, USAF) 
		#2100 ARMY, Department of the (except Corps of Engineers Civil Program Financing) 
		#1700 NAVY, Department of the 
		#9100 EDUCATION, Department of 
		#8900 ENERGY, Department of 
		#7500 HEALTH AND HUMAN SERVICES, Department of 
		#7000 HOMELAND SECURITY, Department of 
		#8600 HOUSING AND URBAN DEVELOPMENT, Department of 
		#1400 INTERIOR, Department of the 
		#1500 JUSTICE, Department of 
		#1600 LABOR, Department of 
		#1900 STATE, Department of 
		#6900 TRANSPORTATION, Department of 
		#2000 TREASURY, Department of the 
		#3600 VETERANS AFFAIRS, Department of 
		#6800 ENVIRONMENTAL PROTECTION AGENCY 
		#4700 GENERAL SERVICES ADMINISTRATION 
		#8000 NATIONAL AERONAUTICS AND SPACE ADMINISTRATION 
		#8800 NATIONAL ARCHIVES AND RECORDS ADMINISTRATION 
		#4900 NATIONAL SCIENCE FOUNDATION 
		#2400 OFFICE OF PERSONNEL MANAGEMENT 
		#2800 SOCIAL SECURITY ADMINISTRATION 

      	

		#Identifies the government agency issuing the credential
		set fascnAgencyCode [string range $bcdFourBitOddParityRepresentationNumbers 0 3]
		ACCESS::session data set session.custom.FASCNAC $fascnAgencyCode

		


		#Fascn length should be 40 with all chars (sentinels and hyphens), next revision should take the length field of the Fascn that is right before the actual Fascn
		#If its not 40, then we should not extract all fields, the agency code and possibly more are safe
		if { $bcdRepresentationLength == $static::fascnStandardLength } {

			if { $static::DEBUG || $static::DEBUGFASCN } {log local0. "In catch GETFASCN Event fascn is $bcdRepresentationLength long"}


			#Identifies the system the card is enrolled in and is unique for each site
			set fascnSystemCode [string range $bcdFourBitOddParityRepresentationNumbers 4 7]
			ACCESS::session data set session.custom.FASCNSC $fascnSystemCode 
		
			#Encoded by the issuing agency. For a given system no duplicate numbers are active
			set fascnCredentialNumber [string range $bcdFourBitOddParityRepresentationNumbers 8 13]
			ACCESS::session data set session.custom.FASCNCN $fascnCredentialNumber
	
			#CS - Field is available to reflect major system changes
			set fascnCredentialSeries [string range $bcdFourBitOddParityRepresentationNumbers 14 14]
			ACCESS::session data set session.custom.FASCNCS $fascnCredentialSeries

			#ICI - Individual Credential Issue (Credential Code) Initially encoded as "1", will be incremented if a card is replaced due to loss or damage
			set fascnIndividualCredentialIssue [string range $bcdFourBitOddParityRepresentationNumbers 15 15]
			ACCESS::session data set session.custom.FASCNICI $fascnIndividualCredentialIssue

			#PI - Person Identifier Numeric Ode used by the identity source to uniquely identify the token carrier (eq DOD DOD EDI PIN ID)
			set fascnPersonaIdentifier [string range $bcdFourBitOddParityRepresentationNumbers 16 25]
			ACCESS::session data set session.custom.FASCNPI $fascnPersonaIdentifier

			#OC - Organizational Category 1 - Federal Government Agency, 2 - State Government Agency, 3 - Commercial Enterprise, 4 - Foreign Government
			set fascnOrganizationalCategory [string range $bcdFourBitOddParityRepresentationNumbers 26 26]
			ACCESS::session data set session.custom.FASCNOC $fascnOrganizationalCategory

			#OI - Organizational Identifier OC=1 - Fips 95-2 Agency Code, OC=2 - State Code, OC=3 - Company Code, OC=4 - Numeric Country Code
			set fascnOrganizationalIdentifier [string range $bcdFourBitOddParityRepresentationNumbers 27 30]
			ACCESS::session data set session.custom.FASCNOI $fascnOrganizationalIdentifier

			#POA - Person/Organization Association Category 1 - Employee, 2 - Civil, 3 - Executive Staff, 4 - Uniformed Service, 5 - Contractor, 6 - Organizational Affiliate, 7 - Organizational Beneficiary
			set fascnPOA [string range $bcdFourBitOddParityRepresentationNumbers 31 31]
			ACCESS::session data set session.custom.FASCNPOA $fascnPOA

			if { $static::DEBUG || $static::DEBUGFASCN } {log local0. "In GETFASCN Event Agency Code: $fascnAgencyCode, System Code: $fascnSystemCode, Credential Number: $fascnCredentialNumber, Credential Series: $fascnCredentialSeries, Individual Credential Issue: $fascnIndividualCredentialIssue, Personal Identifier: $fascnPersonaIdentifier, Organizational Category: $fascnOrganizationalCategory, Organizational Identifier: $fascnOrganizationalIdentifier,  Person/Organization Association Category:  $fascnPOA"}
			
		}

   	} else {
 
      		log local0. "FASCN: base64 decode failed"

   	} 
	
	}

 	 "GETUPN" {
 	 
 	 	if { $static::DEBUG || $static::DEBUGUPN } { log local0. "In GETUPN" }

		set strippedcert [findstr [ACCESS::session data get session.ssl.cert.whole ] "-----BEGIN CERTIFICATE-----" 27 "-----END CERTIFICATE-----"]
   			
		if { [catch { b64decode $strippedcert } str_b64dec] == 0 and $str_b64dec ne "" } { 
				
			###### GETUPN ######################################
      				
			if { [catch {
									
				## UPN OID=1.3.6.1.4.1.311.20.2.3 - HEX=\x06\x0A\x2B\x06\x01\x04\x01\x82\x37\x14\x02\x03 - LENGTH=15 (add 3 to hex count)				
				set offset [string first \x06\x0A\x2B\x06\x01\x04\x01\x82\x37\x14\x02\x03 $str_b64dec]
				set newoffset [expr {$offset + 15}]
            				
				## last value in decoded string (up to new offset and converted to integer) indicates length of the UPN value
				binary scan [string index $str_b64dec $newoffset] c upnlengthinteger
				ACCESS::session data set session.custom.UPN "[string map $static::upnStripChars [string range $str_b64dec [expr {$newoffset + 1}] [expr {$upnlengthinteger + $newoffset}]]]"				
				ACCESS::session data set session.custom.UPNStatus "succeeded"
				if { $static::DEBUG || $static::DEBUGUPN } { log local0. "UPN [ACCESS::session data get session.custom.UPNStatus] : [ACCESS::session data get session.custom.UPN]" }
				
			} error]}{

				ACCESS::session data set session.custom.UPN "NOUPN"
				ACCESS::session data set session.custom.UPNStatus "failed"
				if { $static::DEBUG || $static::DEBUGUPN } { log local0. "UPN: [ACCESS::session data get session.custom.UPNStatus]" }

			}
		}	
	}

	 "GETEDIPI" {

		if { $static::DEBUG || $static::DEBUGEDIPI } { log local0. "In GETEDIPI" }

		set strippedcert [findstr [ACCESS::session data get session.ssl.cert.whole ] "-----BEGIN CERTIFICATE-----" 27 "-----END CERTIFICATE-----"]
   			
		if { [catch { b64decode $strippedcert } str_b64dec] == 0 and $str_b64dec ne "" } { 
				
				
			###### GETEDIPI ######################################
      		if { [catch {
									
				## UPN OID=1.3.6.1.4.1.311.20.2.3 - HEX=\x06\x0A\x2B\x06\x01\x04\x01\x82\x37\x14\x02\x03 - LENGTH=15 (add 3 to hex count)				
				set offset [string first \x06\x0A\x2B\x06\x01\x04\x01\x82\x37\x14\x02\x03 $str_b64dec]
				set newoffset [expr {$offset + 15}]
            				
				## last value in decoded string (up to new offset and converted to integer) indicates length of the UPN value
				binary scan [string index $str_b64dec $newoffset] c upnlengthinteger
								ACCESS::session data set session.custom.UPN "[string map $static::upnStripChars [string range $str_b64dec [expr {$newoffset + 1}] [expr {$upnlengthinteger + $newoffset}]]]" 

				set edipi [lindex [split [ACCESS::session data get session.custom.UPN] "@"] 0]
   				ACCESS::session data set session.custom.EDIPI $edipi
   				ACCESS::session data set session.custom.EDIPIStatus "succeeded"
   				if { $static::DEBUG || $static::EDIPIDEBUG} {log local0. "EDIPI: [ACCESS::session data get session.custom.EDIPI]"}
						
			} error] }{

				ACCESS::session data set session.custom.UPN "NOUPN"
				ACCESS::session data set session.custom.EDIPI "NOEDIPI"
				ACCESS::session data set session.custom.UPNStatus "failed"
				ACCESS::session data set session.custom.EDIPIStatus "failed"
				if { $static::DEBUG || $static::DEBUGEDIPI } { log local0. "EDIPI [ACCESS::session data get session.custom.EDIPIStatus]" }

			}
		}


	
	}

	
	"GETUSERCN" {
	#Extract name before dot in cert common name field
	#Ex. rjohnson.liquid.external would be rjohnson and will be stored in the apm variable 
	#session.custom.USERCN

		if { [catch {

			set CN [ findstr [ACCESS::session data get session.ssl.cert.subject] "CN=" 3 ","]
			set USERCN [ findstr $CN "" 0 "."]
			ACCESS::session data set session.custom.USERCN $USERCN
			ACCESS::session data set session.custom.USERCNStatus "succeeded"
   			if { $static::DEBUG || $static::USERCNDEBUG } {log local0. "USERCN: [ACCESS::session data get session.custom.USERCN]"}

		} error] }{

			ACCESS::session data set session.custom.USERCN "NOUSERCN"
			ACCESS::session data set session.custom.USERCNStatus "failed"
			if { $static::DEBUG || $static::USERCNDEBUG } { log local0. "USERCN [ACCESS::session data get session.custom.USERCNStatus]" }
		
		}	
	}

	
 	"IOSUDIDCHECK" {

		if { $static::DEBUG || $static::IOSUDIDCHECKDEBUG } {log local0. "In IOSUDIDCHECK"}

		#F5 client software is required to get UDID
		if { [ACCESS::session data get session.client.type] == "Standalone" || [ACCESS::session data get session.client.type] == "portalclient"  } {

			#If we want to verify that the username is tied to the UDID
			if { $static::IOSUDIDCHECKUSER  == 1 } {

				
				set macUserList [class search -element $static::IOSUDIDDATAGROUP equals [ACCESS::session data get session.client.unique_id]]		
				if { $static::DEBUG || $static::IOSUDIDCHECKDEBUG } {log local0. "In IOSUDIDCHECK: checking mac address against user"}

	           		if { ( "[lindex $macUserList 0]" == "[ACCESS::session data get session.client.unique_id]"  ) and ( "[lindex $macUserList 1]" == "[ACCESS::session data get session.logon.last.username]" ) } {

           	       			if { $static::DEBUG || $static::IOSUDIDCHECKDEBUG } {log local0. "IOS UDID ID:  [ACCESS::session data get session.client.unique_id] and Username: [ACCESS::session data get session.logon.last.username] Found."}
							ACCESS::session data set session.custom.iosudidcheckresult "succeded"

							

           			} else {

                  				if { $static::DEBUG || $static::IOSUDIDCHECKDEBUG  } {log local0. "IOS UDID NOT Found: [ACCESS::session data get session.client.unique_id], username: [ACCESS::session data get session.logon.last.username]"}
								ACCESS::session data set session.custom.iosudidcheckresult "failed"

								
          				}

			#If we just want to verify the UDID
			} else {

				if { $static::DEBUG || $static::IOSUDIDCHECKDEBUG } {log local0. "In IOSUDIDCHECK: checking UDID not checking user"}

				if {[class search -all $static::IOSUDIDDATAGROUP equals [ACCESS::session data get session.client.unique_id]] > 0 } {

           	       			if { $static::DEBUG || $static::IOSUDIDCHECKDEBUG } {log local0. "IOS UDID ID Found: [ACCESS::session data get session.client.unique_id]"}
							ACCESS::session data set session.custom.iosudidcheckresult "succeded"

           			} else {

                  				if { $static::DEBUG || $static::IOSUDIDCHECKDEBUG  } {log local0. "IOS UDID NOT Found: [ACCESS::session data get session.client.unique_id]"}
								ACCESS::session data set session.custom.iosudidcheckresult "failed"

          			}

			}

		}
	        	
	} 



	"DROIDMACCHECK" {

		if { $static::DEBUG || $static::DROIDMACCHECKDEBUG } {log local0. "In DROIDMACCHECK"}

		#F5 client software is required to get mac address
		if { [ACCESS::session data get session.client.type] == "Standalone" || [ACCESS::session data get session.client.type] == "portalclient"  } {

			#If we want to verify that the username is tied to the mac address
			if { $static::DROIDMACCHECKUSER  == 1 } {

				
				set macUserList [class search -element $static::DROIDMACDATAGROUP equals [ACCESS::session data get session.client.mac_address]]		
				if { $static::DEBUG || $static::DROIDMACCHECKDEBUG } {log local0. "In DROIDMACCHECK: checking mac address against user"}

	           		if { ( "[lindex $macUserList 0]" == "[ACCESS::session data get session.client.mac_address]"  ) and ( "[lindex $macUserList 1]" == "[ACCESS::session data get session.logon.last.username]" ) } {

           	       			if { $static::DEBUG || $static::DROIDMACCHECKDEBUG } {log local0. "DROID MAC ADDRESS:  [ACCESS::session data get session.client.mac_address] and Username: [ACCESS::session data get session.logon.last.username] Found."}

           			} else {

                  				if { $static::DEBUG || $static::DROIDMACCHECKDEBUG  } {log local0. "DROID MAC ADDRESS NOT Found: [ACCESS::session data get session.client.mac_address]"}
								 ACCESS::session remove
          				}

			#If we just want to verify the mac address
			} else {

				if { $static::DEBUG || $static::DROIDMACCHECKDEBUG } {log local0. "In DROIDMACCHECK: checking mac address not checking user"}

				if {[class search -all $static::DROIDMACDATAGROUP equals [ACCESS::session data get session.client.mac_address]] > 0 } {

           	       			if { $static::DEBUG || $static::DROIDMACCHECKDEBUG } {log local0. "DROID MAC ADDRESS Found: [ACCESS::session data get session.client.mac_address]"}

           			} else {

                  				if { $static::DEBUG || $static::DROIDMACCHECKDEBUG  } {log local0. "DROID MAC ADDRESS NOT Found: [ACCESS::session data get session.client.mac_address]"}
								 ACCESS::session remove
          				}

			}

		}
	        	
	} 
	
	"DROIDSNCHECK" {

		if { $static::DEBUG || $static::DROIDSNCHECKDEBUG } {log local0. "In DROIDSNCHECK"}

		#F5 client software is required to get mac address
		if { [ACCESS::session data get session.client.type] == "Standalone" || [ACCESS::session data get session.client.type] == "portalclient"  } {

			#If we want to verify that the username is tied to the mac address
			if { $static::DROIDSNCHECKUSER  == 1 } {

				
				set snUserList [class search -element $static::DROIDMACDATAGROUP equals [ACCESS::session data get session.client.mac_address]]		
				if { $static::DEBUG || $static::DROIDMACCHECKDEBUG } {log local0. "In DROIDMACCHECK: checking mac address against user"}

	           		if { ( "[lindex $snUserList 0]" == "[ACCESS::session data get session.client.serial_number]"  ) and ( "[lindex $snUserList 1]" == "[ACCESS::session data get session.logon.last.username]" ) } {

           	       			if { $static::DEBUG || $static::DROIDSNCHECKDEBUG } {log local0. "DROID SN:  [ACCESS::session data get session.client.serial_number] and Username: [ACCESS::session data get session.logon.last.username] Found."}

           			} else {

                  				if { $static::DEBUG || $static::DROIDSNCHECKDEBUG  } {log local0. "DROID SN NOT Found: [ACCESS::session data get session.client.serial_number]"}
								 ACCESS::session remove
          				}

			#If we just want to verify the SN
			} else {

				if { $static::DEBUG || $static::DROIDSNCHECKDEBUG } {log local0. "In DROIDSNCHECK: checking SN not checking user"}

				if {[class search -all $static::DROIDSNDATAGROUP equals [ACCESS::session data get session.client.serial_number]] > 0 } {

           	       			if { $static::DEBUG || $static::DROIDSNCHECKDEBUG } {log local0. "DROID SN Found: [ACCESS::session data get session.client.serial_number]"}

           			} else {

                  				if { $static::DEBUG || $static::DROIDSNCHECKDEBUG  } {log local0. "DROID SN NOT Found: [ACCESS::session data get session.client.serial_number]"}
								 ACCESS::session remove
          				}

			}

		}
	        	
	} 





      } 
######End of switch#####


}
#End of mobileapm iRule
